SIMPLE ARRAY SOL:
int Solution::solve(vector<int> &A, int B) {
    int max =0;
    int mpos = 0;
    int res =0;
    for(int i=0;i<A.size();i++)
    {
        if(A[i]>max)
        {
            max = A[i];
            mpos = i;
        }
    }
    while(res<B)
    {
        res++;
        A[mpos]--;
        for(int i=0;i<A.size();i++)
        {
            if(A[i]>A[mpos])
            {
                res++;
                A[i]--;
            }
        }
    }
    return A[mpos];
}

-----------------------------------------------------------
DP SOL:

// Approach 1: O(max_height_of_tree/val) time and space soln

int Solution::solve(vector<int> &A, int B) {
    ll i=0, len=A.size(), max_height=*max_element(A.begin(), A.end()), wood_collected=0;
    vector<ll> dp_heights(max_height + 2, 0);
    for (i=0; i<len; i++)
        dp_heights[A[i]]++;                         // Saves total wood at a particular level
    
    for (i=max_height; i>=0 && wood_collected<B; i--){
        dp_heights[i] += dp_heights[i+1];           // Computes the total wood, from the trees above at this level.
        wood_collected += dp_heights[i];            // Calculate suffix sum of wood, to get the answer of total woods collected if we cut at this level.
    }
    return i;                                       // Note: Since the forloop does a i--, so we can simply return i hera. As expected output is 0 indexed.
}
